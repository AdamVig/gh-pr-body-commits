#!/usr/bin/env bash

set -euo pipefail

remote='origin'
beginning_marker='[//]: # (⇲)'
end_marker='[//]: # (⇱)'
beginning_marker_escaped='\[\/\/\]: # (⇲)'
end_marker_escaped='\[\/\/\]: # (⇱)'
template_file="${GIT_DIR-$(git rev-parse --absolute-git-dir)}/gh-pr-body-commits-template"
commits_target='<commits>'

# Do not pipe gh output to a pager
unset PAGER

# Get the name of the default branch for a given remote.
get_default_branch() {
	# If default branch ref is not present, try to update it
	if ! git symbolic-ref --quiet "refs/remotes/$remote/HEAD" &>/dev/null &&
		! git remote set-head "$remote" --auto &>/dev/null; then
		echo 'failed to get default branch from remote'
		return 1
	fi

	default_branch="$(git symbolic-ref "refs/remotes/$remote/HEAD")"
	echo "${default_branch##"refs/remotes/$remote/"}"
}

# `gh pr view` can return closed pull requests, so we use a search instead
# Only one pull request can be open for a branch at a time, so this is guaranteed to return zero or one pull requests
# $1: field to extract
get_pr() {
	field="${1:-}"
	head="$(git symbolic-ref --short HEAD)"
	gh pr list \
		--head="$head" \
		--state='open' \
		--json="$field" \
		--jq="if length == 0 then halt_error(1) else .[0].${field} end" \
		2>/dev/null

}

base_ref="${1-}"
# If $1 starts with two hyphens it's probably a flag, not an argument, so ignore it
if [[ $base_ref == --* ]]; then
	base_ref=''
fi

# No base branch provided, so try to get the base branch from a pull request if there is one
if [ -z "$base_ref" ] && ! base_ref="$(get_pr baseRefName)"; then

	# No base branch provided and no open pull request, so try to get the default branch
	if ! base_ref="$(get_default_branch)"; then
		echo 'error: please provide a base ref'
		exit 1
	fi
fi

generate_body_content() {
	revision_range="$remote"/"$base_ref"..HEAD

	if (($(git rev-list --count "$revision_range") == 0)); then
		echo >&2 "error: no commits found in range '$revision_range'"
		return
	elif (($(git rev-list --count "$revision_range") == 1)); then
		# If there is only one commit, only output the commit body, adding a trailing newline if necessary
		# shellcheck disable=SC1003
		git log \
			"$revision_range" \
			--pretty='format:%b' |
			sed '$a\'
	else
		# Otherwise, output all commits in the branch as a list

		# Format commits as Markdown list items:
		# - <subject>
		#   <body indented by two spaces>
		if ! commits="$(git log \
			"$revision_range" \
			--pretty='format:- %s%w(0,2,2)%+b' \
			--)"; then
			echo >&2 'failed to get commits'
			return 1
		fi

		# 1. Replace `# ` with `- `, preserving any indentation, to change comments into list items
		# 2. Replace tabs with four spaces so that indentation works correctly in Markdown
		# 3. Add a trailing newline if necessary
		# shellcheck disable=SC1003
		if ! echo "$commits" |
			sed -E -e 's/#(\s+)/\1- /g' -e 's/\t/    /g' |
			sed '$a\'; then
			echo >&2 'failed to format commits'
			return 1
		fi
	fi

	# The end marker requires a newline before it, see https://stackoverflow.com/a/20885980
	echo
}

generate_body_content_with_markers() {
	echo "$beginning_marker"
	generate_body_content
	echo "$end_marker"
}

insert_in_template() {
	if ! [ -f "$template_file" ]; then
		cat /dev/stdin
		return
	fi
	sed "/$commits_target/{
r /dev/stdin
d
}" "$template_file"
}

pull_request_body_file="$(mktemp)"
cleanup_pull_request_body_file() {
	rm -f "$pull_request_body_file"
}
trap cleanup_pull_request_body_file EXIT
if [[ $* != *--skip-update* ]] && body="$(get_pr body)"; then
	echo >&2 'updating existing pull request...'

	if [[ $* == *--no-markers* ]]; then
		echo >&2 'overwriting existing pull request description...'
		generate_body_content >"$pull_request_body_file"
	elif [[ $body == *"$beginning_marker"* ]] && [[ $body == *"$end_marker"* ]]; then
		echo >&2 'replacing existing generated content...'
		updated_generated_content_file="$(mktemp)"
		cleanup_updated_generated_content_file() {
			rm -f "$updated_generated_content_file"
		}
		trap cleanup_updated_generated_content_file EXIT

		generate_body_content >"$updated_generated_content_file"
		echo "$body" >"$pull_request_body_file"

		# Replace content between markers with generated content
		ed -s "$pull_request_body_file" <<EOF
/$beginning_marker_escaped/+,/$end_marker_escaped/-d
/$beginning_marker_escaped/r $updated_generated_content_file
w
q
EOF
	else
		echo >&2 'adding generated content at the bottom of the existing pull request description...'
		# Separate from existing body with a newline so that markers are hidden
		echo "${body}

$(generate_body_content_with_markers)" >"$pull_request_body_file"
	fi

	echo >&2 'submitting updated pull request body...'
	gh pr edit --body-file="$pull_request_body_file"
else
	# New pull request

	if [[ $* == *--no-markers* ]]; then
		generate_body_content | insert_in_template
	else
		generate_body_content_with_markers | insert_in_template
	fi
fi
